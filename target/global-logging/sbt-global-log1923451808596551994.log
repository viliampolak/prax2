[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\vilia\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\vilia\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.8.2 (Amazon.com Inc. Java 11.0.16.1)
[debug]       Load.loadUnit: plugins took 224.8367ms
[debug]       Load.loadUnit: defsScala took 0.5026ms
[debug] [Loading] Scanning directory C:\Users\vilia\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vilia\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 31.9402 ms
[debug]           Load.resolveProject(global-plugins) took 93.7899ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\vilia\.sbt\1.0\plugins, plugins: List(<none>))) took 183.5626ms
[debug] [Loading] Done in C:\Users\vilia\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 237.3208ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.3509ms
[debug]     Load.loadUnit(file:/C:/Users/vilia/.sbt/1.0/plugins/, ...) took 481.6596ms
[debug]   Load.apply: load took 1029.7741ms
[debug]   Load.apply: resolveProjects took 33.7292ms
[debug]   Load.apply: finalTransforms took 180.8417ms
[debug]   Load.apply: config.delegates took 14.6126ms
[debug]   Load.apply: Def.make(settings)... took 683.0866ms
[debug]   Load.apply: structureIndex took 158.2725ms
[debug]   Load.apply: mkStreams took 4.2693ms
[info] loading global plugins from C:\Users\vilia\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 4546.13ms
[debug]           Load.loadUnit: plugins took 40.0438ms
[debug]           Load.loadUnit: defsScala took 0.0077ms
[debug] [Loading] Scanning directory C:\Users\vilia\IdeaProjects\untitled1\project
[debug]             Load.loadUnit: mkEval took 13.6097ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\vilia\IdeaProjects\untitled1\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 6.5978 ms
[info] loading settings for project untitled1-build from idea.sbt ...
[debug]               Load.resolveProject(untitled1-build) took 16.2932ms
[debug]             Load.loadTransitive: finalizeProject(Project(id untitled1-build, base: C:\Users\vilia\IdeaProjects\untitled1\project, plugins: List(<none>))) took 24.8266ms
[debug] [Loading] Done in C:\Users\vilia\IdeaProjects\untitled1\project, returning: (untitled1-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 604.5625ms
[debug]           Load.loadUnit: cleanEvalClasses took 14.3526ms
[debug]         Load.loadUnit(file:/C:/Users/vilia/IdeaProjects/untitled1/project/, ...) took 661.155ms
[debug]       Load.apply: load took 665.5222ms
[debug]       Load.apply: resolveProjects took 0.5525ms
[debug]       Load.apply: finalTransforms took 34.7199ms
[debug]       Load.apply: config.delegates took 2.368ms
[debug]       Load.apply: Def.make(settings)... took 127.0959ms
[debug]       Load.apply: structureIndex took 38.3649ms
[debug]       Load.apply: mkStreams took 0.0023ms
[info] loading project definition from C:\Users\vilia\IdeaProjects\untitled1\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 4170.57ms
[debug]     Load.loadUnit: defsScala took 0.0142ms
[debug] [Loading] Scanning directory C:\Users\vilia\IdeaProjects\untitled1
[debug]       Load.loadUnit: mkEval took 0.482ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.7663 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 53.4181ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: C:\Users\vilia\IdeaProjects\untitled1, plugins: List(<none>))) took 59.1076ms
[debug] [Loading] Done in C:\Users\vilia\IdeaProjects\untitled1, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4713.8987ms
[debug]     Load.loadUnit: cleanEvalClasses took 23.1112ms
[debug]   Load.loadUnit(file:/C:/Users/vilia/IdeaProjects/untitled1/, ...) took 8908.723ms
[debug] Load.apply: load took 8910.6618ms
[debug] Load.apply: resolveProjects took 0.1207ms
[debug] Load.apply: finalTransforms took 40.311ms
[debug] Load.apply: config.delegates took 0.3432ms
[debug] Load.apply: Def.make(settings)... took 119.8749ms
[debug] Load.apply: structureIndex took 38.8137ms
[debug] Load.apply: mkStreams took 0.0066ms
[info] set current project to openai (in build file:/C:/Users/vilia/IdeaProjects/untitled1/)
[warn] there's a key that's not used by any other settings/tasks:
[warn]  
[warn] * ThisBuild / version
[warn]   +- C:\Users\vilia\IdeaProjects\untitled1\build.sbt:1
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 61589 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 61589, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to openai (in build file:/C:/Users/vilia/IdeaProjects/untitled1/)
[debug] > Exec(idea-shell, None, None)
